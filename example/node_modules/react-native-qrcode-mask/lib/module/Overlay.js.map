{"version":3,"sources":["Overlay.tsx"],"names":["React","useMemo","useEffect","Animated","View","StyleSheet","Overlay","props","overlayOpacity","children","opacity","Value","timing","toValue","duration","useNativeDriver","start","styles","container","content","content2","create","flex","absoluteFillObject","backgroundColor","memo"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,OAAhB,EAAyBC,SAAzB,QAA0C,OAA1C;AACA,SAASC,QAAT,EAAmBC,IAAnB,EAAyBC,UAAzB,QAA2C,cAA3C;;AAOA,SAASC,OAAT,CAAiBC,KAAjB,EAAsC;AACpC,QAAM;AACJC,IAAAA,cAAc,GAAG,GADb;AAEJC,IAAAA;AAFI,MAGFF,KAHJ;AAIA,QAAMG,OAAO,GAAGT,OAAO,CAAC,MAAM,IAAIE,QAAQ,CAACQ,KAAb,CAAmB,CAAnB,CAAP,EAA8B,EAA9B,CAAvB;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,QAAQ,CAACS,MAAT,CAAgBF,OAAhB,EAAyB;AACvBG,MAAAA,OAAO,EAAEL,cADc;AAEvBM,MAAAA,QAAQ,EAAE,GAFa;AAGvBC,MAAAA,eAAe,EAAE;AAHM,KAAzB,EAIGC,KAJH;AAKD,GANQ,EAMN,CAACN,OAAD,EAAUF,cAAV,CANM,CAAT;;AAQA,MAAIC,QAAJ,EAAc;AACZ,wBACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEQ,MAAM,CAACC;AAApB,oBACE,oBAAC,QAAD,CAAU,IAAV;AACE,MAAA,KAAK,EAAE,CACLD,MAAM,CAACE,OADF,EAEL;AACET,QAAAA;AADF,OAFK;AADT,MADF,EASGD,QATH,CADF;AAaD;;AAED,sBACE,oBAAC,QAAD,CAAU,IAAV;AACE,IAAA,KAAK,EAAE,CACLQ,MAAM,CAACG,QADF,EAEL;AACEV,MAAAA;AADF,KAFK;AADT,IADF;AAUD;;AAED,MAAMO,MAAM,GAAGZ,UAAU,CAACgB,MAAX,CAAkB;AAC/BH,EAAAA,SAAS,EAAE;AACTI,IAAAA,IAAI,EAAE;AADG,GADoB;AAI/BH,EAAAA,OAAO,EAAE,EACP,GAAGd,UAAU,CAACkB,kBADP;AAEPC,IAAAA,eAAe,EAAE;AAFV,GAJsB;AAQ/BJ,EAAAA,QAAQ,EAAE;AACRE,IAAAA,IAAI,EAAE,CADE;AAERE,IAAAA,eAAe,EAAE;AAFT;AARqB,CAAlB,CAAf;AAcA,4BAAexB,KAAK,CAACyB,IAAN,CAAWnB,OAAX,CAAf","sourcesContent":["/**\n * Created by nghinv on Thu Jul 15 2021\n * Copyright (c) 2021 nghinv@lumi.biz\n */\n\nimport React, { useMemo, useEffect } from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\n\ninterface OverlayProps {\n  overlayOpacity?: number;\n  children?: React.ReactNode;\n}\n\nfunction Overlay(props: OverlayProps) {\n  const {\n    overlayOpacity = 0.6,\n    children,\n  } = props;\n  const opacity = useMemo(() => new Animated.Value(0), []);\n\n  useEffect(() => {\n    Animated.timing(opacity, {\n      toValue: overlayOpacity,\n      duration: 350,\n      useNativeDriver: true,\n    }).start();\n  }, [opacity, overlayOpacity]);\n\n  if (children) {\n    return (\n      <View style={styles.container}>\n        <Animated.View\n          style={[\n            styles.content,\n            {\n              opacity,\n            },\n          ]}\n        />\n        {children}\n      </View>\n    );\n  }\n\n  return (\n    <Animated.View\n      style={[\n        styles.content2,\n        {\n          opacity,\n        },\n      ]}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: 'black',\n  },\n  content2: {\n    flex: 1,\n    backgroundColor: 'black',\n  },\n});\n\nexport default React.memo(Overlay);\n"]}