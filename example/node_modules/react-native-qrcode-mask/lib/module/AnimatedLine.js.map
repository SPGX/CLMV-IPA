{"version":3,"sources":["AnimatedLine.tsx"],"names":["React","useEffect","useMemo","Animated","equals","AnimatedLine","props","width","height","edgeBorderWidth","lineThick","lineSize","lineBorderRadius","lineColor","lineDirection","lineAnimationDuration","animatedValue","Value","toValue","anim","loop","sequence","timing","duration","useNativeDriver","start","stop","position","borderRadius","backgroundColor","transform","memo"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,OAA3B,QAA0C,OAA1C;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;;AAcA,SAASC,YAAT,CAAsBC,KAAtB,EAAgD;AAC9C,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,MAFI;AAGJC,IAAAA,eAHI;AAIJC,IAAAA,SAJI;AAKJC,IAAAA,QALI;AAMJC,IAAAA,gBANI;AAOJC,IAAAA,SAPI;AAQJC,IAAAA,aARI;AASJC,IAAAA;AATI,MAUFT,KAVJ;AAWA,QAAMU,aAAa,GAAGd,OAAO,CAAC,MAAM,IAAIC,QAAQ,CAACc,KAAb,CAAmBR,eAAnB,CAAP,EAA6C,CAACA,eAAD,CAA7C,CAA7B;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,OAAO,GAAG,CAACJ,aAAa,KAAK,UAAlB,GAA+BN,MAA/B,GAAyCD,KAA1C,IAAoDE,eAApD,GAAuEC,SAAvF;AAEA,UAAMS,IAAI,GAAGhB,QAAQ,CAACiB,IAAT,CACXjB,QAAQ,CAACkB,QAAT,CAAkB,CAChBlB,QAAQ,CAACmB,MAAT,CAAgBN,aAAhB,EAA+B;AAC7BE,MAAAA,OAD6B;AAE7BK,MAAAA,QAAQ,EAAER,qBAFmB;AAG7BS,MAAAA,eAAe,EAAE;AAHY,KAA/B,CADgB,EAMhBrB,QAAQ,CAACmB,MAAT,CAAgBN,aAAhB,EAA+B;AAC7BE,MAAAA,OAAO,EAAET,eADoB;AAE7Bc,MAAAA,QAAQ,EAAER,qBAFmB;AAG7BS,MAAAA,eAAe,EAAE;AAHY,KAA/B,CANgB,CAAlB,CADW,CAAb;AAeAL,IAAAA,IAAI,CAACM,KAAL;AAEA,WAAO,MAAM;AACXN,MAAAA,IAAI,CAACO,IAAL;AACD,KAFD;AAGD,GAvBQ,EAuBN,CAACV,aAAD,EAAgBT,KAAhB,EAAuBC,MAAvB,EAA+BM,aAA/B,EAA8CC,qBAA9C,EAAqEN,eAArE,CAvBM,CAAT;AAyBA,sBACE,oBAAC,QAAD,CAAU,IAAV;AACE;AACA,IAAA,KAAK,EAAE;AACLkB,MAAAA,QAAQ,EAAE,UADL;AAEL,OAACb,aAAa,KAAK,UAAlB,GAA+B,KAA/B,GAAuC,MAAxC,GAAiD,CAF5C;AAGLP,MAAAA,KAAK,EAAEO,aAAa,KAAK,UAAlB,GAA+BH,QAA/B,GAA0CD,SAH5C;AAILF,MAAAA,MAAM,EAAEM,aAAa,KAAK,UAAlB,GAA+BJ,SAA/B,GAA2CC,QAJ9C;AAKLiB,MAAAA,YAAY,EAAEhB,gBALT;AAMLiB,MAAAA,eAAe,EAAEhB,SANZ;AAOLiB,MAAAA,SAAS,EAAE,CACT;AACE,SAAChB,aAAa,KAAK,UAAlB,GAA+B,YAA/B,GAA8C,YAA/C,GAA8DE;AADhE,OADS;AAPN;AAFT,IADF;AAkBD;;AAED,4BAAehB,KAAK,CAAC+B,IAAN,CAAW1B,YAAX,EAAyBD,MAAzB,CAAf","sourcesContent":["/**\n * Created by nghinv on Thu Jul 15 2021\n * Copyright (c) 2021 nghinv@lumi.biz\n */\n\nimport React, { useEffect, useMemo } from 'react';\nimport { Animated } from 'react-native';\nimport equals from 'react-fast-compare';\n\ninterface AnimatedLineProps {\n  width?: number;\n  height?: number;\n  edgeBorderWidth?: number;\n  lineThick?: number;\n  lineSize?: number | string;\n  lineBorderRadius?: number;\n  lineColor?: string;\n  lineAnimationDuration?: number;\n  lineDirection?: 'vertical' | 'horizontal';\n}\n\nfunction AnimatedLine(props: AnimatedLineProps) {\n  const {\n    width,\n    height,\n    edgeBorderWidth,\n    lineThick,\n    lineSize,\n    lineBorderRadius,\n    lineColor,\n    lineDirection,\n    lineAnimationDuration,\n  } = props;\n  const animatedValue = useMemo(() => new Animated.Value(edgeBorderWidth!), [edgeBorderWidth]);\n\n  useEffect(() => {\n    const toValue = (lineDirection === 'vertical' ? height! : width!) - edgeBorderWidth! - lineThick!;\n\n    const anim = Animated.loop(\n      Animated.sequence([\n        Animated.timing(animatedValue, {\n          toValue,\n          duration: lineAnimationDuration,\n          useNativeDriver: true,\n        }),\n        Animated.timing(animatedValue, {\n          toValue: edgeBorderWidth!,\n          duration: lineAnimationDuration,\n          useNativeDriver: true,\n        }),\n      ]),\n    );\n\n    anim.start();\n\n    return () => {\n      anim.stop();\n    };\n  }, [animatedValue, width, height, lineDirection, lineAnimationDuration, edgeBorderWidth]);\n\n  return (\n    <Animated.View\n      // @ts-ignore\n      style={{\n        position: 'absolute',\n        [lineDirection === 'vertical' ? 'top' : 'left']: 0,\n        width: lineDirection === 'vertical' ? lineSize : lineThick,\n        height: lineDirection === 'vertical' ? lineThick : lineSize,\n        borderRadius: lineBorderRadius,\n        backgroundColor: lineColor,\n        transform: [\n          {\n            [lineDirection === 'vertical' ? 'translateY' : 'translateX']: animatedValue,\n          },\n        ],\n      }}\n    />\n  );\n}\n\nexport default React.memo(AnimatedLine, equals);\n"]}