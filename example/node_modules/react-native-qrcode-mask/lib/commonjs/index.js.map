{"version":3,"sources":["index.tsx"],"names":["QrCodeMask","defaultProps","width","height","edgeWidth","edgeHeight","edgeBorderWidth","edgeColor","showLineAnimated","lineThick","lineBorderRadius","lineSize","lineColor","lineAnimationDuration","lineDirection","topTitleColor","bottomTitleColor","props","overlayOpacity","topTitle","topTitleStyle","renderTop","viewTopTitleStyle","bottomTitle","bottomTitleStyle","viewBottomTitleStyle","renderBottom","renderFrame","StyleSheet","absoluteFillObject","styles","viewTopTitle","zIndex","txtTitle","color","viewCenter","mask","viewBottomTitle","create","flexDirection","justifyContent","alignItems","flex","padding","fontSize","textAlign","React","memo","equals"],"mappings":"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","sourcesContent":["/**\n * Created by nghinv on Thu Jul 15 2021\n * Copyright (c) 2021 nghinv@lumi.biz\n */\n\nimport React from 'react';\nimport { View, Text, StyleSheet, StyleProp, ViewStyle, TextStyle } from 'react-native';\nimport equals from 'react-fast-compare';\nimport Overlay from './Overlay';\nimport Edge from './Edge';\nimport AnimatedLine from './AnimatedLine';\n\ninterface QrCodeMaskProps {\n  width?: number;\n  height?: number;\n  overlayOpacity?: number;\n  showLineAnimated?: boolean;\n  lineThick?: number;\n  lineSize?: number | string;\n  lineBorderRadius?: number;\n  lineColor?: string;\n  lineAnimationDuration?: number;\n  lineDirection?: 'vertical' | 'horizontal';\n  edgeWidth?: number;\n  edgeHeight?: number;\n  edgeColor?: string;\n  edgeBorderWidth?: number;\n  topTitle?: string;\n  topTitleColor?: string;\n  topTitleStyle?: TextStyle;\n  viewTopTitleStyle?: StyleProp<ViewStyle>;\n  renderTop?: () => React.ReactNode;\n  bottomTitle?: string;\n  bottomTitleColor?: string;\n  bottomTitleStyle?: TextStyle;\n  viewBottomTitleStyle?: StyleProp<ViewStyle>;\n  renderBottom?: () => React.ReactNode;\n  renderFrame?: () => React.ReactNode;\n}\n\nQrCodeMask.defaultProps = {\n  width: 260,\n  height: 200,\n  edgeWidth: 20,\n  edgeHeight: 20,\n  edgeBorderWidth: 2,\n  edgeColor: 'white',\n  showLineAnimated: true,\n  lineThick: 2,\n  lineBorderRadius: 2,\n  lineSize: '80%',\n  lineColor: 'green',\n  lineAnimationDuration: 1500,\n  lineDirection: 'vertical',\n  topTitleColor: 'white',\n  bottomTitleColor: 'white',\n};\n\nfunction QrCodeMask(props: QrCodeMaskProps) {\n  const {\n    width,\n    height,\n    overlayOpacity,\n    showLineAnimated,\n    lineThick,\n    lineSize,\n    lineBorderRadius,\n    lineColor,\n    lineDirection,\n    lineAnimationDuration,\n    edgeColor,\n    edgeWidth,\n    edgeHeight,\n    edgeBorderWidth,\n    topTitle,\n    topTitleColor,\n    topTitleStyle,\n    renderTop,\n    viewTopTitleStyle,\n    bottomTitle,\n    bottomTitleColor,\n    bottomTitleStyle,\n    viewBottomTitleStyle,\n    renderBottom,\n    renderFrame,\n  } = props;\n\n  return (\n    <View style={StyleSheet.absoluteFillObject}>\n      <Overlay overlayOpacity={overlayOpacity}>\n        {\n          renderTop ? renderTop() : !!topTitle ? (\n            <View style={[styles.viewTopTitle, { zIndex: 200 }, viewTopTitleStyle]}>\n              <Text style={[styles.txtTitle, { color: topTitleColor }, topTitleStyle]}>{topTitle}</Text>\n            </View>\n          ) : null\n        }\n      </Overlay>\n      <View style={styles.viewCenter}>\n        <Overlay overlayOpacity={overlayOpacity} />\n        <View style={[styles.mask, { width, height }]}>\n          <Edge\n            type='Top_Left'\n            {...{ edgeColor, edgeWidth, edgeHeight, edgeBorderWidth }}\n          />\n          <Edge\n            type='Top_Right'\n            {...{ edgeColor, edgeWidth, edgeHeight, edgeBorderWidth }}\n          />\n          <Edge\n            type='Bottom_Left'\n            {...{ edgeColor, edgeWidth, edgeHeight, edgeBorderWidth }}\n          />\n          <Edge\n            type='Bottom_Right'\n            {...{ edgeColor, edgeWidth, edgeHeight, edgeBorderWidth }}\n          />\n          {\n            renderFrame && renderFrame()\n          }\n          {\n            showLineAnimated && (\n              <AnimatedLine\n                {...{\n                  width,\n                  height,\n                  edgeBorderWidth: edgeBorderWidth! + 3,\n                  lineThick,\n                  lineSize,\n                  lineBorderRadius,\n                  lineColor,\n                  lineDirection,\n                  lineAnimationDuration,\n                }}\n              />\n            )\n          }\n        </View>\n        <Overlay overlayOpacity={overlayOpacity} />\n      </View>\n      <Overlay overlayOpacity={overlayOpacity}>\n        {\n          renderBottom ? renderBottom() : !!bottomTitle ? (\n            <View style={[styles.viewBottomTitle, viewBottomTitleStyle]}>\n              <Text style={[styles.txtTitle, { color: bottomTitleColor }, bottomTitleStyle]}>{bottomTitle}</Text>\n            </View>\n          ) : null\n        }\n      </Overlay>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  viewCenter: {\n    flexDirection: 'row',\n  },\n  mask: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  viewTopTitle: {\n    flex: 1,\n    justifyContent: 'flex-end',\n    padding: 16,\n  },\n  viewBottomTitle: {\n    flex: 1,\n    padding: 16,\n  },\n  txtTitle: {\n    fontSize: 16,\n    textAlign: 'center',\n  },\n});\n\nexport default React.memo(QrCodeMask, equals);\n"]}